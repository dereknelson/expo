{"version":3,"file":"reference.js","sourceRoot":"","sources":["../src/reference.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAIlD,OAAO,WAAW,EAAE,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAEjE;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,gBAAiB,SAAQ,aAAa;IAGzD,YAAY,OAAgB,EAAE,IAAY;QACxC,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,QAAQ;QACN,OAAO,QAAQ,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACvE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAY;QAChB,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;IACrE,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAED;;;OAGG;IACH,cAAc;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9D,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,WAAgB,EAAE;QAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxE,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,QAAgB;QAC3B,MAAM,IAAI,GAAG,IAAI,WAAW,CAC1B,aAAa,EACb,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,EAC5D,IAAI,CACL,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACH,OAAO,CAAC,QAAa,EAAE,WAAgB,EAAE;QACvC,IAAI,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAChD,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC3B,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;SAClC;QAED,MAAM,IAAI,GAAG,IAAI,WAAW,CAC1B,WAAW,EACX,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,EAClE,IAAI,CACL,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import { ReferenceBase } from 'expo-firebase-app';\n\nimport { Storage } from './index.types';\n\nimport StorageTask, { DOWNLOAD_TASK, UPLOAD_TASK } from './task';\n\n/**\n * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n */\nexport default class StorageReference extends ReferenceBase {\n  _storage: Storage;\n\n  constructor(storage: Storage, path: string) {\n    super(path);\n    this._storage = storage;\n  }\n\n  get fullPath(): string {\n    return this.path;\n  }\n\n  toString(): string {\n    return `gs://${this._storage.app.options.storageBucket}${this.path}`;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#child\n   * @param path\n   * @returns {StorageReference}\n   */\n  child(path: string): StorageReference {\n    return new StorageReference(this._storage, `${this.path}/${path}`);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#delete\n   * @returns {Promise.<T>|*}\n   */\n  delete(): Promise<void> {\n    return this._storage.nativeModule.delete(this.path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getDownloadURL\n   * @returns {Promise.<T>|*}\n   */\n  getDownloadURL(): Promise<string> {\n    return this._storage.nativeModule.getDownloadURL(this.path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getMetadata\n   * @returns {Promise.<T>|*}\n   */\n  getMetadata(): Promise<any> {\n    return this._storage.nativeModule.getMetadata(this.path);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#updateMetadata\n   * @param metadata\n   * @returns {Promise.<T>|*}\n   */\n  updateMetadata(metadata: any = {}): Promise<any> {\n    return this._storage.nativeModule.updateMetadata(this.path, metadata);\n  }\n\n  /**\n   * Downloads a reference to the device\n   * @param {String} filePath Where to store the file\n   * @return {Promise}\n   */\n  downloadFile(filePath: string): StorageTask {\n    const task = new StorageTask(\n      DOWNLOAD_TASK,\n      this._storage.nativeModule.downloadFile(this.path, filePath),\n      this\n    );\n    return task;\n  }\n\n  /**\n   * Alias to putFile\n   * @returns {StorageReference.putFile}\n   */\n  get put(): (filePath: any, metadata: any) => StorageTask {\n    return this.putFile;\n  }\n\n  /**\n   * Upload a file path\n   * @param  {string} filePath The local path of the file\n   * @param  {object} metadata An object containing metadata\n   * @return {Promise}\n   */\n  putFile(filePath: any, metadata: any = {}): StorageTask {\n    let _filePath = filePath.replace('file://', '');\n    if (_filePath.includes('%')) {\n      _filePath = decodeURI(_filePath);\n    }\n\n    const task = new StorageTask(\n      UPLOAD_TASK,\n      this._storage.nativeModule.putFile(this.path, _filePath, metadata),\n      this\n    );\n    return task;\n  }\n}\n"]}