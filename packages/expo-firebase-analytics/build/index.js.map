{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { App, ModuleBase } from 'expo-firebase-app';\n\nconst AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;\n\nconst ReservedEventNames = [\n  'app_clear_data',\n  'app_uninstall',\n  'app_update',\n  'error',\n  'first_open',\n  'in_app_purchase',\n  'notification_dismiss',\n  'notification_foreground',\n  'notification_open',\n  'notification_receive',\n  'os_update',\n  'session_start',\n  'user_engagement',\n];\n\nexport const MODULE_NAME = 'ExpoFirebaseAnalytics';\nexport const NAMESPACE = 'analytics';\nexport const statics = {};\n\nconst isString = (value: any): boolean => {\n  return value != null && typeof value === 'string';\n};\n\nexport default class Analytics extends ModuleBase {\n  static moduleName = MODULE_NAME;\n  static namespace = NAMESPACE;\n  static statics = statics;\n\n  constructor(app: App) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE,\n    });\n  }\n\n  /**\n   * Logs an app event.\n   * @param  {string} name\n   * @param params\n   * @return {Promise}\n   */\n  async logEvent(name: string, params: Object = {}): Promise<void> {\n    if (!isString(name)) {\n      throw new Error(\n        `analytics.logEvent(): First argument 'name' is required and must be a string value.`\n      );\n    }\n\n    if (typeof params !== 'undefined' && typeof params !== 'object') {\n      throw new Error(\n        `analytics.logEvent(): Second optional argument 'params' must be an object if provided.`\n      );\n    }\n\n    // check name is not a reserved event name\n    if (ReservedEventNames.includes(name)) {\n      throw new Error(\n        `analytics.logEvent(): event name '${name}' is a reserved event name and can not be used.`\n      );\n    }\n\n    // name format validation\n    if (!AlphaNumericUnderscore.test(name)) {\n      throw new Error(\n        `analytics.logEvent(): Event name '${name}' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.`\n      );\n    }\n\n    // maximum number of allowed params check\n    if (params && Object.keys(params).length > 25)\n      throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).');\n\n    // Parameter names can be up to 24 characters long and must start with an alphabetic character\n    // and contain only alphanumeric characters and underscores. Only String, long and double param\n    // types are supported. String parameter values can be up to 36 characters long. The \"firebase_\"\n    // prefix is reserved and should not be used for parameter names.\n\n    await this.nativeModule.logEvent(name, params);\n  }\n\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param enabled\n   */\n  async setAnalyticsCollectionEnabled(enabled: boolean): Promise<void> {\n    await this.nativeModule.setAnalyticsCollectionEnabled(enabled);\n  }\n\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * @param screenName\n   * @param screenClassOverride\n   */\n  async setCurrentScreen(screenName: string, screenClassOverride?: string): Promise<void> {\n    await this.nativeModule.setCurrentScreen(screenName, screenClassOverride);\n  }\n\n  /**\n   * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds).\n   * @param milliseconds\n   */\n  async setMinimumSessionDuration(milliseconds: number = 10000): Promise<void> {\n    await this.nativeModule.setMinimumSessionDuration(milliseconds);\n  }\n\n  /**\n   * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes).\n   * @param milliseconds\n   */\n  async setSessionTimeoutDuration(milliseconds: number = 1800000): Promise<void> {\n    await this.nativeModule.setSessionTimeoutDuration(milliseconds);\n  }\n\n  /**\n   * Sets the user ID property.\n   * @param id\n   */\n  async setUserId(id: string | null): Promise<void> {\n    if (!isString(id)) {\n      throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');\n    }\n    await this.nativeModule.setUserId(id);\n  }\n\n  /**\n   * Sets a user property to a given value.\n   * @param name\n   * @param value\n   */\n  async setUserProperty(name: string, value: string | null): Promise<void> {\n    if (!isString(value)) {\n      throw new Error(\n        'analytics.setUserProperty(): The supplied property must be a string value or null.'\n      );\n    }\n    await this.nativeModule.setUserProperty(name, value);\n  }\n\n  /**\n   * Sets multiple user properties to the supplied values.\n   * @param object\n   */\n  async setUserProperties(object: Object): Promise<void> {\n    let tasks: any[] = [];\n    for (const entry of Object.entries(object)) {\n      const [property, value] = entry;\n      if (!isString(value)) {\n        throw new Error(\n          `analytics.setUserProperties(): The property with name '${property}' must be a string value or null.`\n        );\n      }\n      tasks.push(this.nativeModule.setUserProperty(property, value));\n    }\n    await Promise.all(tasks);\n  }\n}\n"]}