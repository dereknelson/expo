{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["/* Core types */\nexport type FirebaseError = {\n  message: string;\n  name: string;\n  code: string;\n  stack: string;\n  path: string;\n  details: string;\n  modifiers: string;\n};\n\nexport type FirebaseModule = any;\n\nexport type FirebaseModuleConfig = {\n  statics?: any;\n  events?: string[];\n  moduleName: FirebaseModuleName;\n  hasMultiAppSupport: boolean;\n  hasCustomUrlSupport?: boolean;\n  hasRegionsSupport?: boolean;\n  namespace: FirebaseNamespace;\n};\n\n// TODO: Bacon: Add this\nexport type App = any;\n\nexport type FirebaseModuleName =\n  | 'ExpoFirebaseAdMob'\n  | 'ExpoFirebaseAnalytics'\n  | 'ExpoFirebaseAuth'\n  | 'ExpoFirebaseRemoteConfig'\n  | 'ExpoFirebaseCrash'\n  | 'ExpoFirebaseCrashlytics'\n  | 'ExpoFirebaseDatabase'\n  | 'ExpoFirebaseFirestore'\n  | 'ExpoFirebaseFunctions'\n  | 'ExpoFirebaseInstanceID'\n  | 'ExpoFirebaseInvites'\n  | 'ExpoFirebaseLinks'\n  | 'ExpoFirebaseMessaging'\n  | 'ExpoFirebaseNotifications'\n  | 'ExpoFirebasePerformance'\n  | 'ExpoFirebaseStorage'\n  | 'ExpoFirebaseUtils';\n\nexport type FirebaseNamespace =\n  | 'analytics'\n  | 'auth'\n  | 'config'\n  | 'crashlytics'\n  | 'database'\n  | 'firestore'\n  | 'functions'\n  | 'iid'\n  | 'invites'\n  | 'links'\n  | 'messaging'\n  | 'notifications'\n  | 'perf'\n  | 'storage'\n  | 'utils';\n\nexport type FirebaseOptions = {\n  apiKey: string;\n  appId: string;\n  databaseURL: string;\n  messagingSenderId: string;\n  projectId: string;\n  storageBucket: string;\n};\n\nexport type FirebaseModuleAndStatics<FirebaseModule, FirebaseStatics> = {\n  (): FirebaseModule;\n  nativeModuleExists: boolean;\n} & FirebaseStatics;\n\nexport type FirebaseStatics = any;\n\n/* Utils types */\n\nexport type NativeErrorObject = {\n  code: string;\n  message: string;\n  nativeErrorCode?: string | number;\n  nativeErrorMessage?: string;\n};\n\nexport type NativeErrorResponse = {\n  error: NativeErrorObject;\n  // everything else\n  [key: string]: any;\n};\n\nexport interface NativeErrorInterface extends Error {\n  code: string;\n  nativeErrorCode?: string | number;\n  nativeErrorMessage?: string;\n}\n"]}