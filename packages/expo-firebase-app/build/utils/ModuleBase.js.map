{"version":3,"file":"ModuleBase.js","sourceRoot":"","sources":["../../src/utils/ModuleBase.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACpD,OAAO,EAAE,sBAAsB,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAInE,MAAM,CAAC,OAAO,OAAO,UAAU;IAO7B;;;;OAIG;IACH,YAAY,GAAQ,EAAE,MAA4B,EAAE,iBAA0B;QAC5E,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,4DAA4D,CAAC,CAAC;QAC3F,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,0DAA0D,CAAC,CAAC;QACxF,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,8CAA8C;QAC9C,sBAAsB,CAAC,IAAI,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;QACxD,gBAAgB,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,IAAI,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAClF,CAAC;IAED,eAAe,CAAC,SAAkB;QAChC,SAAS,CACP,SAAS,EACT,mFAAmF,CACpF,CAAC;QACF,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,SAAS,EAAE,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,IAAI,YAAY;QACd,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI,MAAM;QACR,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;CACF","sourcesContent":["import invariant from 'invariant';\nimport { initialiseLogger, getLogger } from './log';\nimport { initialiseNativeModule, getNativeModule } from './native';\nimport App from '../app';\nimport { FirebaseModuleConfig, FirebaseNamespace } from '../types';\n\nexport default class ModuleBase {\n  _app: App;\n\n  _customUrlOrRegion?: string;\n\n  namespace: FirebaseNamespace;\n\n  /**\n   *\n   * @param app\n   * @param config\n   */\n  constructor(app: App, config: FirebaseModuleConfig, customUrlOrRegion?: string) {\n    invariant(config.moduleName, 'Error: expo-firebase-app: ModuleBase() Missing module name');\n    invariant(config.namespace, 'Error: expo-firebase-app: ModuleBase() Missing namespace');\n    const { moduleName } = config;\n    this._app = app;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this.namespace = config.namespace;\n    this.getAppEventName = this.getAppEventName.bind(this);\n    // check if native module exists as all native\n    initialiseNativeModule(this, config, customUrlOrRegion);\n    initialiseLogger(this, `${app.name}:${moduleName.replace('ExpoFirebase', '')}`);\n  }\n\n  getAppEventName(eventName?: string): string {\n    invariant(\n      eventName,\n      'Error: expo-firebase-app: ModuleBase.getAppEventName() requires a valid eventName'\n    );\n    return `${this.app.name}-${eventName}`;\n  }\n\n  /**\n   * Returns the App instance for current module\n   * @return {*}\n   */\n  get app(): App {\n    return this._app;\n  }\n\n  get nativeModule(): any {\n    return getNativeModule(this);\n  }\n\n  get logger(): any {\n    return getLogger(this);\n  }\n}\n"]}