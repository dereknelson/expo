{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/utils/log.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAGpC,MAAM,cAAc,GAA8B,EAAE,CAAC;AAErD,MAAM,YAAY,GAAG,CAAC,MAAkB,EAAU,EAAE,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;AAE9F,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,MAAkB,EAAE,EAAE;IAC9C,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IACjC,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,KAAK,EAAE,CAAC;IACR,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;CACT,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,MAAkB,EAAE,YAAoB,EAAE,EAAE;IAC3E,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IACjC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;QACxB,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,WAAW,EAAE,EAAE,CAAC;QAClD,cAAc,CAAC,GAAG,CAAC,GAAG;YACpB,KAAK,CAAC,GAAG,IAAI;gBACX,IAAI,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC/D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YACtC,CAAC;YACD,IAAI,CAAC,GAAG,IAAI;gBACV,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC9D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YACtC,CAAC;YACD,IAAI,CAAC,GAAG,IAAI;gBACV,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAAE,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YAC1F,CAAC;YACD,KAAK,CAAC,GAAG,IAAI;gBACX,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YACzB,CAAC;SACF,CAAC;KACH;AACH,CAAC,CAAC","sourcesContent":["import INTERNALS from './internals';\nimport ModuleBase from './ModuleBase';\n\nconst NATIVE_LOGGERS: { [key: string]: Object } = {};\n\nconst getModuleKey = (module: ModuleBase): string => `${module.app.name}:${module.namespace}`;\n\nexport const getLogger = (module: ModuleBase) => {\n  const key = getModuleKey(module);\n  return NATIVE_LOGGERS[key];\n};\n\nexport const LEVELS = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3,\n};\n\nexport const initialiseLogger = (module: ModuleBase, logNamespace: string) => {\n  const key = getModuleKey(module);\n  if (!NATIVE_LOGGERS[key]) {\n    const prefix = `ðŸ”¥ ${logNamespace.toUpperCase()}`;\n    NATIVE_LOGGERS[key] = {\n      debug(...args) {\n        if (__DEV__ && LEVELS.debug >= LEVELS[INTERNALS.OPTIONS.logLevel])\n          console.log(...[prefix, ...args]);\n      },\n      info(...args) {\n        if (__DEV__ && LEVELS.info >= LEVELS[INTERNALS.OPTIONS.logLevel])\n          console.log(...[prefix, ...args]);\n      },\n      warn(...args) {\n        if (__DEV__ && LEVELS.warn >= LEVELS[INTERNALS.OPTIONS.logLevel]) console.warn(...args);\n      },\n      error(...args) {\n        console.error(...args);\n      },\n    };\n  }\n};\n"]}