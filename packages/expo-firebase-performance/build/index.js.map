{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAO,UAAU,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,KAAK,MAAM,SAAS,CAAC;AAE5B,MAAM,CAAC,MAAM,WAAW,GAAG,yBAAyB,CAAC;AACrD,MAAM,CAAC,MAAM,SAAS,GAAG,MAAM,CAAC;AAChC,MAAM,CAAC,MAAM,OAAO,GAAG,EAAE,CAAC;AAE1B,MAAM,YAAY,GAAG;IACnB,OAAO,EAAE,IAAI;IACb,MAAM,EAAE,IAAI;IACZ,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,IAAI;IACV,OAAO,EAAE,IAAI;IACb,KAAK,EAAE,IAAI;IACX,IAAI,EAAE,IAAI;IACV,GAAG,EAAE,IAAI;IACT,KAAK,EAAE,IAAI;CACZ,CAAC;AAaF,MAAM,CAAC,OAAO,OAAO,qBAAsB,SAAQ,UAAU;IAK3D,YAAY,GAAQ;QAClB,KAAK,CAAC,GAAG,EAAE;YACT,UAAU,EAAE,WAAW;YACvB,kBAAkB,EAAE,KAAK;YACzB,mBAAmB,EAAE,KAAK;YAC1B,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,+BAA+B,CAAC,OAAgB;QACpD,SAAS,CACP,OAAO,OAAO,KAAK,SAAS,EAC5B,4EAA4E,CAC7E,CAAC;QACF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,+BAA+B,CAAC,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAa;QACpB,SAAS,CAAC,OAAO,KAAK,KAAK,QAAQ,EAAE,oDAAoD,CAAC,CAAC;QAC3F,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACH,aAAa,CAAC,GAAW,EAAE,UAAsB;QAC/C,SAAS,CACP,OAAO,GAAG,KAAK,QAAQ,EACvB,mEAAmE,CACpE,CAAC;QACF,SAAS,CACP,OAAO,UAAU,KAAK,QAAQ,EAC9B,0EAA0E,CAC3E,CAAC;QACF,SAAS,CACP,YAAY,CAAC,UAAU,CAAC,EACxB,+DAA+D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAC3F,IAAI,CACL,EAAE,CACJ,CAAC;QAEF,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAC;;AA1DM,gCAAU,GAAG,WAAW,CAAC;AACzB,+BAAS,GAAG,SAAS,CAAC;AACtB,6BAAO,GAAG,OAAO,CAAC;AA2D3B,OAAO,EAAc,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC","sourcesContent":["import { App, ModuleBase } from 'expo-firebase-app';\nimport invariant from 'invariant';\n\nimport HttpMetric from './HttpMetric';\nimport Trace from './Trace';\n\nexport const MODULE_NAME = 'ExpoFirebasePerformance';\nexport const NAMESPACE = 'perf';\nexport const statics = {};\n\nconst HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true,\n};\n\ntype HttpMethod =\n  | 'CONNECT'\n  | 'DELETE'\n  | 'GET'\n  | 'HEAD'\n  | 'OPTIONS'\n  | 'PATCH'\n  | 'POST'\n  | 'PUT'\n  | 'TRACE';\n\nexport default class PerformanceMonitoring extends ModuleBase {\n  static moduleName = MODULE_NAME;\n  static namespace = NAMESPACE;\n  static statics = statics;\n\n  constructor(app: App) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE,\n    });\n  }\n\n  /**\n   * Globally enable or disable performance monitoring\n   * @param enabled\n   * @returns {*}\n   */\n  async setPerformanceCollectionEnabled(enabled: boolean): Promise<void> {\n    invariant(\n      typeof enabled === 'boolean',\n      'firebase.perf().setPerformanceCollectionEnabled() requires a boolean value'\n    );\n    return await this.nativeModule.setPerformanceCollectionEnabled(enabled);\n  }\n\n  /**\n   * Returns a new trace instance\n   * @param trace\n   */\n  newTrace(trace: string): Trace | undefined {\n    invariant(typeof trace === 'string', 'firebase.perf().newTrace() requires a string value');\n    return new Trace(this.nativeModule, trace);\n  }\n\n  /**\n   * Return a new HttpMetric instance\n   * @param url\n   * @param httpMethod\n   * @returns {HttpMetric}\n   */\n  newHttpMetric(url: string, httpMethod: HttpMethod): HttpMetric {\n    invariant(\n      typeof url === 'string',\n      'firebase.perf().newHttpMetric() requires url to be a string value'\n    );\n    invariant(\n      typeof httpMethod === 'string',\n      'firebase.perf().newHttpMetric() requires httpMethod to be a string value'\n    );\n    invariant(\n      HTTP_METHODS[httpMethod],\n      `firebase.perf().newHttpMetric() httpMethod should be one of ${Object.keys(HTTP_METHODS).join(\n        ', '\n      )}`\n    );\n\n    return new HttpMetric(this.nativeModule, url, httpMethod);\n  }\n}\n\nexport { HttpMethod, Trace, HttpMetric, HTTP_METHODS };\n"]}