{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { App, ModuleBase, SharedEventEmitter, utils } from 'expo-firebase-app';\nimport invariant from 'invariant';\n\nimport AndroidAction from './AndroidAction';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport AndroidNotifications from './AndroidNotifications';\nimport AndroidRemoteInput from './AndroidRemoteInput';\nimport IOSNotifications from './IOSNotifications';\nimport Notification, { NotificationOpen } from './Notification';\nimport {\n  BadgeIconType,\n  Category,\n  Defaults,\n  GroupAlert,\n  Importance,\n  NativeNotification,\n  NativeNotificationOpen,\n  Priority,\n  Schedule,\n  SemanticAction,\n  Visibility,\n} from './types';\n\nconst { isFunction, isObject } = utils;\n\ntype OnNotification = (notification: Notification) => any;\n\ntype OnNotificationObserver = {\n  next: OnNotification;\n};\n\ntype OnNotificationOpened = (notification: NotificationOpen) => any;\n\ntype OnNotificationOpenedObserver = {\n  next: NotificationOpen;\n};\n\nconst NATIVE_EVENTS = {\n  notificationDisplayed: 'Expo.Firebase.notifications_notification_displayed',\n  notificationOpened: 'Expo.Firebase.notifications_notification_opened',\n  notificationReceived: 'Expo.Firebase.notifications_notification_received',\n};\n\nexport const MODULE_NAME = 'ExpoFirebaseNotifications';\nexport const NAMESPACE = 'notifications';\n\nexport const statics = {\n  Android: {\n    Action: AndroidAction,\n    BadgeIconType,\n    Category,\n    Channel: AndroidChannel,\n    ChannelGroup: AndroidChannelGroup,\n    Defaults,\n    GroupAlert,\n    Importance,\n    Priority,\n    RemoteInput: AndroidRemoteInput,\n    SemanticAction,\n    Visibility,\n  },\n  Notification,\n};\n\n// iOS 8/9 scheduling\n// fireDate: Date;\n// timeZone: TimeZone;\n// repeatInterval: NSCalendar.Unit;\n// repeatCalendar: Calendar;\n// region: CLRegion;\n// regionTriggersOnce: boolean;\n\n// iOS 10 scheduling\n// TODO\n\n// Android scheduling\n// TODO\n\n/**\n * @class Notifications\n */\nexport default class Notifications extends ModuleBase {\n  static moduleName = MODULE_NAME;\n  static namespace = NAMESPACE;\n  static statics = statics;\n\n  _android: AndroidNotifications;\n\n  _ios: IOSNotifications;\n\n  constructor(app: App) {\n    super(app, {\n      events: Object.values(NATIVE_EVENTS),\n      hasCustomUrlSupport: false,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      namespace: NAMESPACE,\n    });\n    this._android = new AndroidNotifications(this);\n    this._ios = new IOSNotifications(this);\n\n    SharedEventEmitter.addListener(\n      // sub to internal native event - this fans out to\n      // public event name: onNotificationDisplayed\n      NATIVE_EVENTS.notificationDisplayed,\n      (notification: NativeNotification) => {\n        SharedEventEmitter.emit('onNotificationDisplayed', new Notification(notification, this));\n      }\n    );\n\n    SharedEventEmitter.addListener(\n      // sub to internal native event - this fans out to\n      // public event name: onNotificationOpened\n      NATIVE_EVENTS.notificationOpened,\n      (notificationOpen: NativeNotificationOpen) => {\n        SharedEventEmitter.emit('onNotificationOpened', {\n          action: notificationOpen.action,\n          notification: new Notification(notificationOpen.notification, this),\n          results: notificationOpen.results,\n        });\n      }\n    );\n\n    SharedEventEmitter.addListener(\n      // sub to internal native event - this fans out to\n      // public event name: onNotification\n      NATIVE_EVENTS.notificationReceived,\n      (notification: NativeNotification) => {\n        SharedEventEmitter.emit('onNotification', new Notification(notification, this));\n      }\n    );\n\n    // Tell the native module that we're ready to receive events\n    if (this.nativeModule.jsInitialised) {\n      this.nativeModule.jsInitialised();\n    }\n  }\n\n  get android(): AndroidNotifications {\n    return this._android;\n  }\n\n  get ios(): IOSNotifications {\n    return this._ios;\n  }\n\n  /**\n   * Cancel all notifications\n   */\n  cancelAllNotifications(): Promise<void> {\n    return this.nativeModule.cancelAllNotifications();\n  }\n\n  /**\n   * Cancel a notification by id.\n   * @param notificationId\n   */\n  cancelNotification(notificationId: string): Promise<void> {\n    invariant(notificationId, 'Notifications: cancelNotification expects a `notificationId`');\n    return this.nativeModule.cancelNotification(notificationId);\n  }\n\n  /**\n   * Display a notification\n   * @param notification\n   * @returns {*}\n   */\n  displayNotification(notification: Notification): Promise<void> {\n    invariant(\n      notification instanceof Notification,\n      `Notifications:displayNotification expects a 'Notification' but got type ${typeof notification}`\n    );\n\n    try {\n      return this.nativeModule.displayNotification(notification.build());\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  getBadge(): Promise<number> {\n    return this.nativeModule.getBadge();\n  }\n\n  getInitialNotification(): Promise<NotificationOpen> {\n    return this.nativeModule\n      .getInitialNotification()\n      .then((notificationOpen: NativeNotificationOpen) => {\n        if (notificationOpen) {\n          return {\n            action: notificationOpen.action,\n            notification: new Notification(notificationOpen.notification, this),\n            results: notificationOpen.results,\n          };\n        }\n        return null;\n      });\n  }\n\n  /**\n   * Returns an array of all scheduled notifications\n   * @returns {Promise.<Array>}\n   */\n  getScheduledNotifications(): Promise<Notification[]> {\n    return this.nativeModule.getScheduledNotifications();\n  }\n\n  onNotification(nextOrObserver: OnNotification | OnNotificationObserver | any): () => any {\n    let listener;\n    if (isFunction(nextOrObserver)) {\n      listener = nextOrObserver;\n    } else if (\n      isObject(nextOrObserver) &&\n      nextOrObserver.next &&\n      typeof nextOrObserver.next === 'function'\n    ) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error(\n        'Notifications.onNotification failed: First argument must be a function or observer object with a `next` function.'\n      );\n    }\n\n    this.logger.info('Creating onNotification listener');\n    SharedEventEmitter.addListener('onNotification', listener);\n\n    return () => {\n      this.logger.info('Removing onNotification listener');\n      SharedEventEmitter.removeListener('onNotification', listener);\n    };\n  }\n\n  onNotificationDisplayed(\n    nextOrObserver: OnNotification | OnNotificationObserver | any\n  ): () => any {\n    let listener;\n    if (isFunction(nextOrObserver)) {\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error(\n        'Notifications.onNotificationDisplayed failed: First argument must be a function or observer object with a `next` function.'\n      );\n    }\n\n    this.logger.info('Creating onNotificationDisplayed listener');\n    SharedEventEmitter.addListener('onNotificationDisplayed', listener);\n\n    return () => {\n      this.logger.info('Removing onNotificationDisplayed listener');\n      SharedEventEmitter.removeListener('onNotificationDisplayed', listener);\n    };\n  }\n\n  onNotificationOpened(\n    nextOrObserver: OnNotificationOpened | OnNotificationOpenedObserver | any\n  ): () => any {\n    let listener;\n    if (isFunction(nextOrObserver)) {\n      listener = nextOrObserver;\n    } else if (isObject(nextOrObserver) && isFunction(nextOrObserver.next)) {\n      listener = nextOrObserver.next;\n    } else {\n      throw new Error(\n        'Notifications.onNotificationOpened failed: First argument must be a function or observer object with a `next` function.'\n      );\n    }\n\n    this.logger.info('Creating onNotificationOpened listener');\n    SharedEventEmitter.addListener('onNotificationOpened', listener);\n\n    return () => {\n      this.logger.info('Removing onNotificationOpened listener');\n      SharedEventEmitter.removeListener('onNotificationOpened', listener);\n    };\n  }\n\n  /**\n   * Remove all delivered notifications.\n   */\n  removeAllDeliveredNotifications(): Promise<void> {\n    return this.nativeModule.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Remove a delivered notification.\n   * @param notificationId\n   */\n  removeDeliveredNotification(notificationId: string): Promise<void> {\n    invariant(\n      notificationId,\n      'Notifications: removeDeliveredNotification expects a `notificationId`'\n    );\n    return this.nativeModule.removeDeliveredNotification(notificationId);\n  }\n\n  /**\n   * Schedule a notification\n   * @param notification\n   * @returns {*}\n   */\n  scheduleNotification(notification: Notification, schedule: Schedule): Promise<void> {\n    invariant(\n      notification instanceof Notification,\n      `Notifications:scheduleNotification expects a 'Notification' but got type ${typeof notification}`\n    );\n    try {\n      const nativeNotification = notification.build();\n      nativeNotification.schedule = schedule;\n      return this.nativeModule.scheduleNotification(nativeNotification);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  setBadge(badge: number): Promise<void> {\n    return this.nativeModule.setBadge(badge);\n  }\n}\n\nexport {\n  AndroidAction,\n  AndroidChannel,\n  AndroidChannelGroup,\n  AndroidNotifications,\n  AndroidRemoteInput,\n  Notification,\n  NotificationOpen,\n};\n"]}