{"version":3,"file":"WriteBatch.js","sourceRoot":"","sources":["../src/WriteBatch.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAYnD;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,UAAU;IAI7B,YAAY,SAAoB;QAC9B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,CAAC,MAAyB;QAC9B,mBAAmB;QACnB,kDAAkD;QAClD,mEAAmE;QACnE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,GAAG,CAAC,MAAyB,EAAE,IAAY,EAAE,OAAoB;QAC/D,mBAAmB;QACnB,kDAAkD;QAClD,qCAAqC;QACrC,4DAA4D;QAC5D,MAAM,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,IAAI,EAAE,UAAU;YAChB,OAAO;YACP,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,MAAyB,EAAE,GAAG,IAAW;QAC9C,mBAAmB;QACnB,kDAAkD;QAClD,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC;YAC1B,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nimport DocumentReference from './DocumentReference';\nimport { Firestore, SetOptions } from './firestoreTypes.types';\n\ntype DocumentWrite = {\n  data?: Object;\n  options?: Object;\n  path: string;\n  type: 'DELETE' | 'SET' | 'UPDATE';\n};\n\n/**\n * @class WriteBatch\n */\nexport default class WriteBatch {\n  _firestore: Firestore;\n  _writes: DocumentWrite[];\n\n  constructor(firestore: Firestore) {\n    this._firestore = firestore;\n    this._writes = [];\n  }\n\n  commit(): Promise<void> {\n    return this._firestore.nativeModule.documentBatch(this._writes);\n  }\n\n  delete(docRef: DocumentReference): WriteBatch {\n    // TODO: Validation\n    // validate.isDocumentReference('docRef', docRef);\n    // validate.isOptionalPrecondition('deleteOptions', deleteOptions);\n    this._writes.push({\n      path: docRef.path,\n      type: 'DELETE',\n    });\n\n    return this;\n  }\n\n  set(docRef: DocumentReference, data: Object, options?: SetOptions) {\n    // TODO: Validation\n    // validate.isDocumentReference('docRef', docRef);\n    // validate.isDocument('data', data);\n    // validate.isOptionalPrecondition('options', writeOptions);\n    const nativeData = buildNativeMap(data);\n    this._writes.push({\n      data: nativeData,\n      options,\n      path: docRef.path,\n      type: 'SET',\n    });\n\n    return this;\n  }\n\n  update(docRef: DocumentReference, ...args: any[]): WriteBatch {\n    // TODO: Validation\n    // validate.isDocumentReference('docRef', docRef);\n    const data = parseUpdateArgs(args, 'WriteBatch.update');\n    this._writes.push({\n      data: buildNativeMap(data),\n      path: docRef.path,\n      type: 'UPDATE',\n    });\n\n    return this;\n  }\n}\n"]}