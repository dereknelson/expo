{"version":3,"file":"Transaction.js","sourceRoot":"","sources":["../src/Transaction.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAkBnD,+EAA+E;AAC/E,gCAAgC;AAEhC;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,WAAW;IAM9B,YAAY,SAAoB,EAAE,IAAqB;QACrD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;IAClC,CAAC;IAED;;;;OAIG;IAEH;;;;;OAKG;IACH,QAAQ;QACN,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;IAClC,CAAC;IAED;;;;OAIG;IAEH;;;;;;OAMG;IACH,GAAG,CAAC,WAA8B;QAChC,wBAAwB;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY;aAChC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC;aACvD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;IACnE,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,GAAG,CAAC,WAA8B,EAAE,IAAY,EAAE,OAAoB;QACpE,wBAAwB;QACxB,+BAA+B;QAC/B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACvB,IAAI,EAAE,KAAK;YACX,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,OAAO,IAAI,EAAE;SACvB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;OAWG;IACH,MAAM,CAAC,WAA8B,EAAE,GAAG,IAAgB;QACxD,wBAAwB;QACxB,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACvB,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC;SAC3B,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,WAA8B;QACnC,wBAAwB;QACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACvB,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,WAAW,CAAC,IAAI;SACvB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["import DocumentSnapshot from './DocumentSnapshot';\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nimport { Firestore } from './firestoreTypes.types';\n//import type { TransactionMeta } from './TransactionHandler';\nimport DocumentReference from './DocumentReference';\n\ntype TransactionMeta = { [key: string]: any };\ntype Command = {\n  type: 'set' | 'update' | 'delete';\n  path: string;\n  data?: { [key: string]: any };\n  options?: SetOptions | {};\n};\n\ntype SetOptions = {\n  merge: boolean;\n};\n\n// TODO docs state all get requests must be made FIRST before any modifications\n// TODO so need to validate that\n\n/**\n * @class Transaction\n */\nexport default class Transaction {\n  _pendingResult?: any;\n  _firestore: Firestore;\n  _meta: TransactionMeta;\n  _commandBuffer: Array<Command>;\n\n  constructor(firestore: Firestore, meta: TransactionMeta) {\n    this._meta = meta;\n    this._commandBuffer = [];\n    this._firestore = firestore;\n    this._pendingResult = undefined;\n  }\n\n  /**\n   * -------------\n   * INTERNAL API\n   * -------------\n   */\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n  _prepare() {\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be retrieved. Value must not be null.\n   *\n   * @returns Promise<DocumentSnapshot>\n   */\n  get(documentRef: DocumentReference): Promise<DocumentSnapshot> {\n    // todo validate doc ref\n    return this._firestore.nativeModule\n      .transactionGetDocument(this._meta.id, documentRef.path)\n      .then(result => new DocumentSnapshot(this._firestore, result));\n  }\n\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   *\n   * @param documentRef DocumentReference A reference to the document to be created. Value must not be null.\n   * @param data Object An object of the fields and values for the document.\n   * @param options SetOptions An object to configure the set behavior.\n   *        Pass {merge: true} to only replace the values specified in the data argument.\n   *        Fields omitted will remain untouched.\n   *\n   * @returns {Transaction}\n   */\n  set(documentRef: DocumentReference, data: Object, options?: SetOptions): Transaction {\n    // todo validate doc ref\n    // todo validate data is object\n    this._commandBuffer.push({\n      type: 'set',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n      options: options || {},\n    });\n\n    return this;\n  }\n\n  /**\n   * Updates fields in the document referred to by this DocumentReference.\n   * The update will fail if applied to a document that does not exist. Nested\n   * fields can be updated by providing dot-separated field path strings or by providing FieldPath objects.\n   *\n   * @param documentRef DocumentReference A reference to the document to be updated. Value must not be null.\n   * @param args any Either an object containing all of the fields and values to update,\n   *        or a series of arguments alternating between fields (as string or FieldPath\n   *        objects) and values.\n   *\n   * @returns {Transaction}\n   */\n  update(documentRef: DocumentReference, ...args: Array<any>): Transaction {\n    // todo validate doc ref\n    const data = parseUpdateArgs(args, 'Transaction.update');\n    this._commandBuffer.push({\n      type: 'update',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n    });\n\n    return this;\n  }\n\n  /**\n   * Deletes the document referred to by the provided DocumentReference.\n   *\n   * @param documentRef DocumentReference A reference to the document to be deleted. Value must not be null.\n   *\n   * @returns {Transaction}\n   */\n  delete(documentRef: DocumentReference): Transaction {\n    // todo validate doc ref\n    this._commandBuffer.push({\n      type: 'delete',\n      path: documentRef.path,\n    });\n\n    return this;\n  }\n}\n"]}