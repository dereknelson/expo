{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/utils/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAE1C,OAAO,SAAS,MAAM,cAAc,CAAC;AAErC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;AAErC,MAAM,kBAAkB,GAAG,CAAC,QAAkB,EAAE,KAAU,EAAU,EAAE;IACpE,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACzB,OAAO;YACL,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK;SACrB,CAAC;KACH;IACD,OAAO;QACL,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;KAC5D,CAAC;AACJ,CAAC,CAAC;AAEF,wDAAwD;AACxD,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,IAAY,EAAE,QAAkB,EAAE,KAAU,EAAU,EAAE;IACzF,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACzB,OAAO;YACL,GAAG,IAAI;YACP,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK;SACrB,CAAC;KACH;IACD,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;QACrB,OAAO;YACL,GAAG,IAAI;YACP,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;SAC/E,CAAC;KACH;IACD,OAAO;QACL,GAAG,IAAI;QACP,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;KAC5D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAW,EAAE,UAAkB,EAAE,EAAE;IACjE,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CACb,GAAG,UAAU,mEAAmE,CACjF,CAAC;SACH;QACD,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KACf;SAAM,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CACb,GAAG,UAAU,6GAA6G,CAC3H,CAAC;KACH;SAAM;QACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACvC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1B,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACjB,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACnB;iBAAM,IAAI,GAAG,YAAY,SAAS,EAAE;gBACnC,IAAI,GAAG,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACvD;iBAAM;gBACL,MAAM,IAAI,KAAK,CACb,GAAG,UAAU,8BAA8B,CAAC,gCAAgC,CAC7E,CAAC;aACH;SACF;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import { utils } from 'expo-firebase-app';\n\nimport FieldPath from '../FieldPath';\n\nconst { isObject, isString } = utils;\n\nconst buildFieldPathData = (segments: string[], value: any): Object => {\n  if (segments.length === 1) {\n    return {\n      [segments[0]]: value,\n    };\n  }\n  return {\n    [segments[0]]: buildFieldPathData(segments.slice(1), value),\n  };\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport const mergeFieldPathData = (data: Object, segments: string[], value: any): Object => {\n  if (segments.length === 1) {\n    return {\n      ...data,\n      [segments[0]]: value,\n    };\n  }\n  if (data[segments[0]]) {\n    return {\n      ...data,\n      [segments[0]]: mergeFieldPathData(data[segments[0]], segments.slice(1), value),\n    };\n  }\n  return {\n    ...data,\n    [segments[0]]: buildFieldPathData(segments.slice(1), value),\n  };\n};\n\nexport const parseUpdateArgs = (args: any[], methodName: string) => {\n  let data = {};\n  if (args.length === 1) {\n    if (!isObject(args[0])) {\n      throw new Error(\n        `${methodName} failed: If using a single update argument, it must be an object.`\n      );\n    }\n    [data] = args;\n  } else if (args.length % 2 === 1) {\n    throw new Error(\n      `${methodName} failed: The update arguments must be either a single object argument, or equal numbers of key/value pairs.`\n    );\n  } else {\n    for (let i = 0; i < args.length; i += 2) {\n      const key = args[i];\n      const value = args[i + 1];\n      if (isString(key)) {\n        data[key] = value;\n      } else if (key instanceof FieldPath) {\n        data = mergeFieldPathData(data, key._segments, value);\n      } else {\n        throw new Error(\n          `${methodName} failed: Argument at index ${i} must be a string or FieldPath`\n        );\n      }\n    }\n  }\n  return data;\n};\n"]}