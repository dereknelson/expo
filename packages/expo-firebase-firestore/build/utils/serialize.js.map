{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../src/utils/serialize.ts"],"names":[],"mappings":"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","sourcesContent":["import { utils } from 'expo-firebase-app';\n\nimport Blob from '../Blob';\nimport DocumentReference from '../DocumentReference';\nimport { DOCUMENT_ID } from '../FieldPath';\nimport FieldValue from '../FieldValue';\nimport GeoPoint from '../GeoPoint';\nimport Path from '../Path';\n// import type Firestore from '../';\nimport { NativeTypeMap } from '../firestoreTypes.types';\n\ntype Firestore = object;\n\nconst { typeOf } = utils;\n\n/*\n * Functions that build up the data needed to represent\n * the different types available within Firestore\n * for transmission to the native side\n */\n\nexport const buildNativeMap = (data: Object): { [key: string]: NativeTypeMap } => {\n  const nativeData = {};\n  if (data) {\n    Object.keys(data).forEach(key => {\n      const typeMap = buildTypeMap(data[key]);\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    });\n  }\n  return nativeData;\n};\n\nexport const buildNativeArray = (array: { [key: string]: any }[]): NativeTypeMap[] => {\n  const nativeArray: any[] = [];\n  if (array) {\n    array.forEach(value => {\n      const typeMap = buildTypeMap(value);\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    });\n  }\n  return nativeArray;\n};\n\nexport const buildTypeMap = (value: any): NativeTypeMap | null => {\n  const type = typeOf(value);\n\n  if (Number.isNaN(value)) {\n    return {\n      type: 'nan',\n      value: null,\n    };\n  }\n\n  if (value === Infinity) {\n    return {\n      type: 'infinity',\n      value: null,\n    };\n  }\n\n  if (value === null || value === undefined) {\n    return {\n      type: 'null',\n      value: null,\n    };\n  }\n\n  if (value === DOCUMENT_ID) {\n    return {\n      type: 'documentid',\n      value: null,\n    };\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return {\n      type,\n      value,\n    };\n  }\n\n  if (type === 'array') {\n    return {\n      type,\n      value: buildNativeArray(value),\n    };\n  }\n\n  if (type === 'object') {\n    if (value instanceof DocumentReference) {\n      return {\n        type: 'reference',\n        value: value.path,\n      };\n    }\n\n    if (value instanceof GeoPoint) {\n      return {\n        type: 'geopoint',\n        value: {\n          latitude: value.latitude,\n          longitude: value.longitude,\n        },\n      };\n    }\n\n    if (value instanceof Date) {\n      return {\n        type: 'date',\n        value: value.getTime(),\n      };\n    }\n\n    if (value instanceof Blob) {\n      return {\n        type: 'blob',\n        value: value.toBase64(),\n      };\n    }\n\n    if (value instanceof FieldValue) {\n      return {\n        type: 'fieldvalue',\n        value: {\n          elements: value.elements,\n          type: value.type,\n        },\n      };\n    }\n\n    return {\n      type: 'object',\n      value: buildNativeMap(value),\n    };\n  }\n\n  console.warn(`Unknown data type received ${type}`);\n  return null;\n};\n\n/*\n * Functions that parse the received from the native\n * side and converts to the correct Firestore JS types\n */\n\nexport const parseNativeMap = (\n  firestore: Firestore,\n  nativeData: { [key: string]: NativeTypeMap }\n): Object | void => {\n  let data;\n  if (nativeData) {\n    data = {};\n    Object.keys(nativeData).forEach(key => {\n      data[key] = parseTypeMap(firestore, nativeData[key]);\n    });\n  }\n  return data;\n};\n\nconst parseNativeArray = (firestore: Firestore, nativeArray: NativeTypeMap[]): any[] => {\n  const array: any[] = [];\n  if (nativeArray) {\n    nativeArray.forEach(typeMap => {\n      array.push(parseTypeMap(firestore, typeMap));\n    });\n  }\n  return array;\n};\n\n//TODO: Bacon: Switch\nconst parseTypeMap = (firestore: Firestore, typeMap: NativeTypeMap): any => {\n  const { type, value } = typeMap;\n  if (type === 'null') {\n    return null;\n  }\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return value;\n  }\n  if (type === 'array') {\n    return parseNativeArray(firestore, value);\n  }\n  if (type === 'object') {\n    return parseNativeMap(firestore, value);\n  }\n  if (type === 'reference') {\n    return new DocumentReference(firestore, Path.fromName(value));\n  }\n  if (type === 'geopoint') {\n    return new GeoPoint(value.latitude, value.longitude);\n  }\n  if (type === 'date') {\n    return new Date(value);\n  }\n  if (type === 'blob') {\n    return Blob.fromBase64String(value);\n  }\n  if (type === 'infinity') {\n    return Infinity;\n  }\n  if (type === 'nan') {\n    return NaN;\n  }\n  console.warn(`Unknown data type received ${type}`);\n  return value;\n};\n"]}