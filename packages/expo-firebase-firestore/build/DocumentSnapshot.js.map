{"version":3,"file":"DocumentSnapshot.js","sourceRoot":"","sources":["../src/DocumentSnapshot.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,IAAI,MAAM,QAAQ,CAAC;AAC1B,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAInD,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;AAEpC,MAAM,oBAAoB,GAAG,CAAC,IAAmB,EAAE,QAAkB,EAAO,EAAE;IAC5E,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC5B,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACzB,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,oBAAoB,CAAC,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,gBAAgB;IAKnC,YAAY,SAAoB,EAAE,UAAkC;QAsBpE,SAAI,GAAG,GAAkB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;QAEvC,QAAG,GAAG,CAAC,SAA6B,EAAO,EAAE;YAC3C,IAAI,SAAS,YAAY,SAAS,EAAE;gBAClC,OAAO,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;aAC9D;YAED,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC;QA7BA,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC;IAClC,CAAC;IAED,IAAI,EAAE;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACtB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CAWF","sourcesContent":["import { utils } from 'expo-firebase-app';\nimport DocumentReference from './DocumentReference';\nimport FieldPath from './FieldPath';\nimport Path from './Path';\nimport { parseNativeMap } from './utils/serialize';\n\nimport { Firestore, NativeDocumentSnapshot, SnapshotMetadata } from './firestoreTypes.types';\n\nconst { isObject, deepGet } = utils;\n\nconst extractFieldPathData = (data: Object | void, segments: string[]): any => {\n  if (!data || !isObject(data)) {\n    return undefined;\n  }\n  const pathValue = data[segments[0]];\n  if (segments.length === 1) {\n    return pathValue;\n  }\n  return extractFieldPathData(pathValue, segments.slice(1));\n};\n\n/**\n * @class DocumentSnapshot\n */\nexport default class DocumentSnapshot {\n  _data: Object | void;\n  _metadata: SnapshotMetadata;\n  _ref: DocumentReference;\n\n  constructor(firestore: Firestore, nativeData: NativeDocumentSnapshot) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = nativeData.metadata;\n    this._ref = new DocumentReference(firestore, Path.fromName(nativeData.path));\n  }\n\n  get exists(): boolean {\n    return this._data !== undefined;\n  }\n\n  get id(): string | null {\n    return this._ref.id;\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._metadata;\n  }\n\n  get ref(): DocumentReference {\n    return this._ref;\n  }\n\n  data = (): Object | void => this._data;\n\n  get = (fieldPath: string | FieldPath): any => {\n    if (fieldPath instanceof FieldPath) {\n      return extractFieldPathData(this._data, fieldPath._segments);\n    }\n\n    return deepGet(this._data, fieldPath, './');\n  };\n}\n"]}