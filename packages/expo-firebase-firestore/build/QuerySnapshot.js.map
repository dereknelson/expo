{"version":3,"file":"QuerySnapshot.js","sourceRoot":"","sources":["../src/QuerySnapshot.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAoBlD;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,aAAa;IAShC,YAAY,SAAoB,EAAE,KAAY,EAAE,UAA+B;QAC7E,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,cAAc,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;QACxF,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;QACnF,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,QAA6C;QACnD,mBAAmB;QACnB,6CAA6C;QAE7C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACvB,QAAQ,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import DocumentChange from './DocumentChange';\nimport DocumentSnapshot from './DocumentSnapshot';\n\nimport {\n  Firestore,\n  NativeDocumentChange,\n  NativeDocumentSnapshot,\n  SnapshotMetadata,\n} from './firestoreTypes.types';\n\n/**\n * @class QuerySnapshot\n */\nimport Query from './Query';\n\ntype NativeQuerySnapshot = {\n  changes: NativeDocumentChange[];\n  documents: NativeDocumentSnapshot[];\n  metadata: SnapshotMetadata;\n};\n\n/**\n * @class QuerySnapshot\n */\nexport default class QuerySnapshot {\n  _changes: DocumentChange[];\n\n  _docs: DocumentSnapshot[];\n\n  _metadata: SnapshotMetadata;\n\n  _query: Query;\n\n  constructor(firestore: Firestore, query: Query, nativeData: NativeQuerySnapshot) {\n    this._changes = nativeData.changes.map(change => new DocumentChange(firestore, change));\n    this._docs = nativeData.documents.map(doc => new DocumentSnapshot(firestore, doc));\n    this._metadata = nativeData.metadata;\n    this._query = query;\n  }\n\n  get docChanges(): DocumentChange[] {\n    return this._changes;\n  }\n\n  get docs(): DocumentSnapshot[] {\n    return this._docs;\n  }\n\n  get empty(): boolean {\n    return this._docs.length === 0;\n  }\n\n  get metadata(): SnapshotMetadata {\n    return this._metadata;\n  }\n\n  get query(): Query {\n    return this._query;\n  }\n\n  get size(): number {\n    return this._docs.length;\n  }\n\n  forEach(callback: (snapshot: DocumentSnapshot) => any) {\n    // TODO: Validation\n    // validate.isFunction('callback', callback);\n\n    this._docs.forEach(doc => {\n      callback(doc);\n    });\n  }\n}\n"]}