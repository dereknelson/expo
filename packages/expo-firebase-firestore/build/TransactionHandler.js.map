{"version":3,"file":"TransactionHandler.js","sourceRoot":"","sources":["../src/TransactionHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { SharedEventEmitter } from 'expo-firebase-app';\n\nimport Transaction from './Transaction';\n\nimport { Firestore } from './firestoreTypes.types';\n\nlet transactionId = 0;\n\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\nconst generateTransactionId = (): number => transactionId++;\n\nexport type TransactionMeta = {\n  id: number;\n  stack: string[];\n  reject: Function;\n  resolve: Function;\n  transaction?: Transaction;\n  updateFunction: (transaction: Transaction) => Promise<any>;\n};\n\ntype TransactionEvent = {\n  id: number;\n  type: 'update' | 'error' | 'complete';\n  error?: { code: string; message: string };\n};\n\n/**\n * @class TransactionHandler\n */\nexport default class TransactionHandler {\n  _firestore: Firestore;\n  _pending: {\n    [key: number]: {\n      meta: TransactionMeta;\n      transaction: Transaction;\n    };\n  };\n\n  constructor(firestore: Firestore) {\n    this._pending = {};\n    this._firestore = firestore;\n    SharedEventEmitter.addListener(\n      this._firestore.getAppEventName('Expo.Firebase.firestore_transaction_event'),\n      this._handleTransactionEvent.bind(this)\n    );\n  }\n\n  /**\n   * -------------\n   * INTERNAL API\n   * -------------\n   */\n\n  /**\n   * Add a new transaction and start it natively.\n   * @param updateFunction\n   */\n  _add(updateFunction: (transaction: Transaction) => Promise<any>): Promise<any> {\n    const id = generateTransactionId();\n    // $FlowExpectedError: Transaction has to be populated\n\n    const stackError: any = new Error();\n\n    const meta: TransactionMeta = {\n      id,\n      // To be replaced later\n      resolve() {},\n      reject() {},\n      updateFunction,\n      stack: stackError.stack\n        .split('\\n')\n        .slice(2)\n        .join('\\n'),\n    };\n\n    this._pending[id] = {\n      meta,\n      transaction: new Transaction(this._firestore, meta),\n    };\n\n    // deferred promise\n    return new Promise((resolve, reject) => {\n      this._firestore.nativeModule.transactionBegin(id);\n      meta.resolve = r => {\n        resolve(r);\n        this._remove(id);\n      };\n      meta.reject = e => {\n        reject(e);\n        this._remove(id);\n      };\n    });\n  }\n\n  /**\n   * Destroys a local instance of a transaction meta\n   *\n   * @param id\n   * @private\n   */\n  _remove(id) {\n    this._firestore.nativeModule.transactionDispose(id);\n    delete this._pending[id];\n  }\n\n  /**\n   * -------------\n   *    EVENTS\n   * -------------\n   */\n\n  /**\n   * Handles incoming native transaction events and distributes to correct\n   * internal handler by event.type\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n  _handleTransactionEvent(event: TransactionEvent) {\n    // eslint-disable-next-line default-case\n    switch (event.type) {\n      case 'update':\n        this._handleUpdate(event);\n        break;\n      case 'error':\n        this._handleError(event);\n        break;\n      case 'complete':\n        this._handleComplete(event);\n        break;\n    }\n  }\n\n  /**\n   * Handles incoming native transaction update events\n   *\n   * @param event\n   * @private\n   */\n  async _handleUpdate(event: TransactionEvent) {\n    const { id } = event;\n    // abort if no longer exists js side\n    if (!this._pending[id]) return this._remove(id);\n\n    const { meta, transaction } = this._pending[id];\n    const { updateFunction } = meta;\n\n    const reject: any = meta.reject;\n    // clear any saved state from previous transaction runs\n    transaction._prepare();\n\n    let finalError;\n    let updateFailed;\n    let pendingResult;\n\n    // run the users custom update functionality\n    try {\n      const possiblePromise = updateFunction(transaction);\n\n      // validate user has returned a promise in their update function\n      // TODO must it actually return a promise? Can't find any usages of it without one...\n      if (!possiblePromise || !possiblePromise.then) {\n        finalError = new Error(\n          'Update function for `firestore.runTransaction(updateFunction)` must return a Promise.'\n        );\n      } else {\n        pendingResult = await possiblePromise;\n      }\n    } catch (exception) {\n      // exception can still be falsey if user `Promise.reject();` 's with no args\n      // so we track the exception with a updateFailed boolean to ensure no fall-through\n      updateFailed = true;\n      finalError = exception;\n    }\n\n    // reject the final promise and remove from native\n    // update is failed when either the users updateFunction\n    // throws an error or rejects a promise\n    if (updateFailed || finalError) {\n      // $FlowExpectedError: Reject will always be present\n      return reject(finalError);\n    }\n\n    // capture the resolved result as we'll need this\n    // to resolve the runTransaction() promise when\n    // native emits that the transaction is final\n    transaction._pendingResult = pendingResult;\n\n    // send the buffered update/set/delete commands for native to process\n    return this._firestore.nativeModule.transactionApplyBuffer(id, transaction._commandBuffer);\n  }\n\n  /**\n   * Handles incoming native transaction error events\n   *\n   * @param event\n   * @private\n   */\n  _handleError(event: TransactionEvent) {\n    const { id, error } = event;\n    const meta: any = this._pending[id].meta;\n\n    if (meta && error) {\n      const { code, message } = error;\n      // build a JS error and replace its stack\n      // with the captured one at start of transaction\n      // so it's actually relevant to the user\n      const errorWithStack: any = new Error(message);\n      // $FlowExpectedError: code is needed for Firebase errors\n      errorWithStack.code = code;\n      // $FlowExpectedError: stack should be a stack trace\n      errorWithStack.stack = `Error: ${message}\\n${meta.stack}`;\n\n      // $FlowExpectedError: Reject will always be present\n      meta.reject(errorWithStack);\n    }\n  }\n\n  /**\n   * Handles incoming native transaction complete events\n   *\n   * @param event\n   * @private\n   */\n  _handleComplete(event: TransactionEvent) {\n    const { id } = event;\n    const { meta, transaction } = this._pending[id];\n\n    if (meta) {\n      const pendingResult = transaction._pendingResult;\n      // $FlowExpectedError: Resolve will always be present\n      meta.resolve(pendingResult);\n    }\n  }\n}\n"]}