{"version":3,"file":"Query.js","sourceRoot":"","sources":["../src/Query.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeErrorResponse, SharedEventEmitter, utils } from 'expo-firebase-app';\n\nimport DocumentSnapshot from './DocumentSnapshot';\nimport FieldPath from './FieldPath';\nimport QuerySnapshot from './QuerySnapshot';\nimport SnapshotError from './SnapshotError';\nimport { buildNativeArray, buildTypeMap } from './utils/serialize';\n\nimport Path from './Path';\nimport {\n  Firestore,\n  MetadataChanges,\n  QueryDirection,\n  GetOptions,\n  QueryOperator,\n} from './firestoreTypes.types';\n\nconst { firestoreAutoId, isFunction, isObject } = utils;\n\nenum DIRECTIONS {\n  ASC = 'ASCENDING',\n  asc = 'ASCENDING',\n  DESC = 'DESCENDING',\n  desc = 'DESCENDING',\n}\n\nconst OPERATORS: { [key: string]: string } = {\n  '=': 'EQUAL',\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS',\n};\n\ntype NativeFieldPath = {\n  elements?: string[];\n  string?: string;\n  type: 'fieldpath' | 'string';\n};\ntype FieldFilter = {\n  fieldPath: NativeFieldPath;\n  operator: string;\n  value: any;\n};\ntype FieldOrder = {\n  direction: string;\n  fieldPath: NativeFieldPath;\n};\ntype QueryOptions = {\n  endAt?: any[];\n  endBefore?: any[];\n  limit?: number;\n  offset?: number;\n  selectFields?: string[];\n  startAfter?: any[];\n  startAt?: any[];\n};\n\nexport type ObserverOnError = (error: SnapshotError) => void;\nexport type ObserverOnNext = (snapshot: QuerySnapshot) => void;\n\nexport type Observer = {\n  error?: ObserverOnError;\n  next: ObserverOnNext;\n};\n\nconst buildNativeFieldPath = (fieldPath: string | FieldPath): NativeFieldPath => {\n  if (fieldPath instanceof FieldPath) {\n    return {\n      elements: fieldPath._segments,\n      type: 'fieldpath',\n    };\n  }\n  return {\n    string: fieldPath,\n    type: 'string',\n  };\n};\n\n/**\n * @class Query\n */\nexport default class Query {\n  _fieldFilters: FieldFilter[];\n  _fieldOrders: FieldOrder[];\n  _firestore: Firestore;\n  _iid?: number;\n  _queryOptions: QueryOptions;\n  _referencePath: Path;\n\n  constructor(\n    firestore: Firestore,\n    path: Path,\n    fieldFilters?: FieldFilter[],\n    fieldOrders?: FieldOrder[],\n    queryOptions?: QueryOptions\n  ) {\n    this._fieldFilters = fieldFilters || [];\n    this._fieldOrders = fieldOrders || [];\n    this._firestore = firestore;\n    this._queryOptions = queryOptions || {};\n    this._referencePath = path;\n  }\n\n  get firestore(): Firestore {\n    return this._firestore;\n  }\n\n  endAt(...snapshotOrVarArgs: any[]): Query {\n    const options = {\n      ...this._queryOptions,\n      endAt: this._buildOrderByOption(snapshotOrVarArgs),\n    };\n\n    return new Query(\n      this.firestore,\n      this._referencePath,\n      this._fieldFilters,\n      this._fieldOrders,\n      options\n    );\n  }\n\n  endBefore(...snapshotOrVarArgs: any[]): Query {\n    const options = {\n      ...this._queryOptions,\n      endBefore: this._buildOrderByOption(snapshotOrVarArgs),\n    };\n\n    return new Query(\n      this.firestore,\n      this._referencePath,\n      this._fieldFilters,\n      this._fieldOrders,\n      options\n    );\n  }\n\n  async get(options?: GetOptions): Promise<QuerySnapshot> {\n    if (options) {\n      if (!isObject(options)) {\n        throw new Error('Query.get failed: First argument must be an object.');\n      } else if (\n        options.source &&\n        (options.source !== 'default' && options.source !== 'server' && options.source !== 'cache')\n      ) {\n        throw new Error(\n          'Query.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'\n        );\n      }\n    }\n    const nativeData = await this._firestore.nativeModule.collectionGet(\n      this._referencePath.relativeName,\n      this._fieldFilters,\n      this._fieldOrders,\n      this._queryOptions,\n      options\n    );\n    return new QuerySnapshot(this._firestore, this, nativeData);\n  }\n\n  limit(limit: number): Query {\n    // TODO: Validation\n    // validate.isInteger('n', n);\n\n    const options = {\n      ...this._queryOptions,\n      limit,\n    };\n    return new Query(\n      this.firestore,\n      this._referencePath,\n      this._fieldFilters,\n      this._fieldOrders,\n      options\n    );\n  }\n\n  onSnapshot(\n    optionsOrObserverOrOnNext: MetadataChanges | Observer | ObserverOnNext,\n    observerOrOnNextOrOnError?: Observer | ObserverOnNext | ObserverOnError,\n    onError?: ObserverOnError\n  ) {\n    let observer: Observer;\n    let metadataChanges = {};\n    // Called with: onNext, ?onError\n    if (optionsOrObserverOrOnNext && typeof optionsOrObserverOrOnNext === 'function') {\n      if (observerOrOnNextOrOnError && typeof observerOrOnNextOrOnError !== 'function') {\n        throw new Error('Query.onSnapshot failed: Second argument must be a valid function.');\n      }\n      // $FlowExpectedError: Not coping with the overloaded method signature\n      observer = {\n        next: optionsOrObserverOrOnNext,\n        error: observerOrOnNextOrOnError as ObserverOnError,\n      };\n    } else if (optionsOrObserverOrOnNext && isObject(optionsOrObserverOrOnNext)) {\n      optionsOrObserverOrOnNext = optionsOrObserverOrOnNext as Observer;\n      // Called with: Observer\n      if (optionsOrObserverOrOnNext.next) {\n        if (isFunction(optionsOrObserverOrOnNext.next)) {\n          if (optionsOrObserverOrOnNext.error && !isFunction(optionsOrObserverOrOnNext.error)) {\n            throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');\n          }\n          // $FlowExpectedError: Not coping with the overloaded method signature\n          observer = {\n            next: optionsOrObserverOrOnNext.next,\n            error: optionsOrObserverOrOnNext.error,\n          };\n        } else {\n          throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');\n        }\n      } else if (\n        Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')\n      ) {\n        metadataChanges = optionsOrObserverOrOnNext;\n        // Called with: Options, onNext, ?onError\n        if (typeof observerOrOnNextOrOnError === 'function') {\n          if (onError && !isFunction(onError)) {\n            throw new Error('Query.onSnapshot failed: Third argument must be a valid function.');\n          }\n          // $FlowExpectedError: Not coping with the overloaded method signature\n          observer = {\n            next: observerOrOnNextOrOnError as ObserverOnNext,\n            error: onError,\n          };\n          // Called with Options, Observer\n        } else if (\n          observerOrOnNextOrOnError &&\n          isObject(observerOrOnNextOrOnError) &&\n          observerOrOnNextOrOnError.next\n        ) {\n          if (isFunction(observerOrOnNextOrOnError.next)) {\n            if (observerOrOnNextOrOnError.error && !isFunction(observerOrOnNextOrOnError.error)) {\n              throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');\n            }\n            observer = {\n              next: observerOrOnNextOrOnError.next,\n              error: observerOrOnNextOrOnError.error,\n            };\n          } else {\n            throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');\n          }\n        } else {\n          throw new Error(\n            'Query.onSnapshot failed: Second argument must be a function or observer.'\n          );\n        }\n      } else {\n        throw new Error(\n          'Query.onSnapshot failed: First argument must be a function, observer or options.'\n        );\n      }\n    } else {\n      throw new Error('Query.onSnapshot failed: Called with invalid arguments.');\n    }\n    const listenerId = firestoreAutoId();\n\n    const listener = nativeQuerySnapshot => {\n      const querySnapshot = new QuerySnapshot(this._firestore, this, nativeQuerySnapshot);\n      observer.next(querySnapshot);\n    };\n\n    let unsubscribe: () => void;\n\n    // Listen to snapshot events\n    const snapshotSubscription = SharedEventEmitter.addListener(\n      this._firestore.getAppEventName(`onQuerySnapshot:${listenerId}`),\n      listener\n    );\n\n    // listen for snapshot error events\n    const errorSubscription = SharedEventEmitter.addListener(\n      this._firestore.getAppEventName(`onQuerySnapshotError:${listenerId}`),\n      (e: NativeErrorResponse) => {\n        if (unsubscribe) unsubscribe();\n        const error = new SnapshotError(e);\n        if (observer.error) observer.error(error);\n        else this.firestore.log.error(error);\n      }\n    );\n\n    // Add the native listener\n    this._firestore.nativeModule.collectionOnSnapshot(\n      this._referencePath.relativeName,\n      this._fieldFilters,\n      this._fieldOrders,\n      this._queryOptions,\n      listenerId,\n      metadataChanges\n    );\n\n    // return an unsubscribe method\n    unsubscribe = () => {\n      snapshotSubscription.remove();\n      errorSubscription.remove();\n      // cancel native listener\n      this._firestore.nativeModule.collectionOffSnapshot(\n        this._referencePath.relativeName,\n        this._fieldFilters,\n        this._fieldOrders,\n        this._queryOptions,\n        listenerId\n      );\n    };\n\n    return unsubscribe;\n  }\n\n  orderBy(fieldPath: string | FieldPath, directionStr: QueryDirection = 'asc'): Query {\n    // TODO: Validation\n    // validate.isFieldPath('fieldPath', fieldPath);\n    // validate.isOptionalFieldOrder('directionStr', directionStr);\n\n    if (\n      this._queryOptions.startAt ||\n      this._queryOptions.startAfter ||\n      this._queryOptions.endAt ||\n      this._queryOptions.endBefore\n    ) {\n      throw new Error(\n        'Cannot specify an orderBy() constraint after calling ' +\n          'startAt(), startAfter(), endBefore() or endAt().'\n      );\n    }\n\n    const newOrder: FieldOrder = {\n      direction: DIRECTIONS[directionStr],\n      fieldPath: buildNativeFieldPath(fieldPath),\n    };\n    const combinedOrders = this._fieldOrders.concat(newOrder);\n    return new Query(\n      this.firestore,\n      this._referencePath,\n      this._fieldFilters,\n      combinedOrders,\n      this._queryOptions\n    );\n  }\n\n  startAfter(...snapshotOrVarArgs: any[]): Query {\n    const options = {\n      ...this._queryOptions,\n      startAfter: this._buildOrderByOption(snapshotOrVarArgs),\n    };\n\n    return new Query(\n      this.firestore,\n      this._referencePath,\n      this._fieldFilters,\n      this._fieldOrders,\n      options\n    );\n  }\n\n  startAt(...snapshotOrVarArgs: any[]): Query {\n    const options = {\n      ...this._queryOptions,\n      startAt: this._buildOrderByOption(snapshotOrVarArgs),\n    };\n\n    return new Query(\n      this.firestore,\n      this._referencePath,\n      this._fieldFilters,\n      this._fieldOrders,\n      options\n    );\n  }\n\n  where(fieldPath: string | FieldPath, opStr: QueryOperator, value: any): Query {\n    // TODO: Validation\n    // validate.isFieldPath('fieldPath', fieldPath);\n    // validate.isFieldFilter('fieldFilter', opStr, value);\n    const nativeValue = buildTypeMap(value);\n    const newFilter: FieldFilter = {\n      fieldPath: buildNativeFieldPath(fieldPath),\n      operator: OPERATORS[opStr],\n      value: nativeValue,\n    };\n    const combinedFilters = this._fieldFilters.concat(newFilter);\n    return new Query(\n      this.firestore,\n      this._referencePath,\n      combinedFilters,\n      this._fieldOrders,\n      this._queryOptions\n    );\n  }\n\n  /**\n   * INTERNALS\n   */\n\n  _buildOrderByOption(snapshotOrVarArgs: any[]) {\n    // TODO: Validation\n    let values;\n    if (snapshotOrVarArgs.length === 1 && snapshotOrVarArgs[0] instanceof DocumentSnapshot) {\n      const docSnapshot: DocumentSnapshot = snapshotOrVarArgs[0];\n      values = [];\n      for (let i = 0; i < this._fieldOrders.length; i++) {\n        const fieldOrder = this._fieldOrders[i];\n        if (fieldOrder.fieldPath.type === 'string' && fieldOrder.fieldPath.string) {\n          values.push(docSnapshot.get(fieldOrder.fieldPath.string));\n        } else if (fieldOrder.fieldPath.elements) {\n          const fieldPath = new FieldPath(...fieldOrder.fieldPath.elements);\n          values.push(docSnapshot.get(fieldPath));\n        }\n      }\n    } else {\n      values = snapshotOrVarArgs;\n    }\n\n    return buildNativeArray(values);\n  }\n}\n"]}