{"version":3,"file":"Blob.js","sourceRoot":"","sources":["../src/Blob.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,MAAM,CAAC,OAAO,OAAO,IAAI;IAGvB,YAAY,YAAoB;QAC9B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,gBAAgB,CAAC,MAAc;QACpC,SAAS,CACP,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EACxC,oFAAoF,CACrF,CAAC;QAEF,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,cAAc,CAAC,KAAiB;QACrC,SAAS,CACP,KAAK,YAAY,UAAU,EAC3B,iEAAiE,CAClE,CAAC;QAEF,OAAO,IAAI,IAAI,CACb,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CACtF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,OAAO,CAAC,IAAU;QAChB,SAAS,CAAC,IAAI,YAAY,IAAI,EAAE,oDAAoD,CAAC,CAAC;QAEtF,OAAO,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,aAAa,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACH,YAAY;QACV,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,OAAO,0BAA0B,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;IACtD,CAAC;CACF","sourcesContent":["import { Base64 } from 'js-base64';\nimport invariant from 'invariant';\nexport default class Blob {\n  _binaryString: string;\n\n  constructor(binaryString: string) {\n    this._binaryString = binaryString;\n  }\n\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n  static fromBase64String(base64: string): Blob {\n    invariant(\n      base64 === 'string' && base64.length > 0,\n      'firestore.Blob.fromBase64String expects a string of at least 1 character in length'\n    );\n\n    return new Blob(Base64.atob(base64));\n  }\n\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n  static fromUint8Array(array: Uint8Array): Blob {\n    invariant(\n      array instanceof Uint8Array,\n      'firestore.Blob.fromUint8Array expects an instance of Uint8Array'\n    );\n\n    return new Blob(\n      Array.prototype.map.call(array, (char: number) => String.fromCharCode(char)).join('')\n    );\n  }\n\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n  isEqual(blob: Blob): boolean {\n    invariant(blob instanceof Blob, 'firestore.Blob.isEqual expects an instance of Blob');\n\n    return this._binaryString === blob._binaryString;\n  }\n\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n  toBase64(): string {\n    return Base64.btoa(this._binaryString);\n  }\n\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n  toUint8Array(): Uint8Array {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n  toString(): string {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n}\n"]}