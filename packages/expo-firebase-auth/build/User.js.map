{"version":3,"file":"User.js","sourceRoot":"","sources":["../src/User.ts"],"names":[],"mappings":"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","sourcesContent":["import { INTERNALS } from 'expo-firebase-app';\n// import Auth from './';\nimport {\n  ActionCodeSettings,\n  AuthCredential,\n  NativeUser,\n  UserCredential,\n  UserInfo,\n  UserMetadata,\n  IdTokenResult,\n} from './types';\n\ntype Auth = any;\n\ntype UpdateProfile = {\n  displayName?: string;\n  photoURL?: string;\n};\n\nexport default class User {\n  _auth: Auth;\n\n  _user: NativeUser;\n\n  /**\n   *\n   * @param auth Instance of Authentication class\n   * @param user user result object from native\n   */\n  constructor(auth: Auth, user: NativeUser) {\n    this._auth = auth;\n    this._user = user;\n  }\n\n  /**\n   * PROPERTIES\n   */\n\n  get displayName(): string | null {\n    return this._user.displayName || null;\n  }\n\n  get email(): string | null {\n    return this._user.email || null;\n  }\n\n  get emailVerified(): boolean {\n    return this._user.emailVerified || false;\n  }\n\n  get isAnonymous(): boolean {\n    return this._user.isAnonymous || false;\n  }\n\n  get metadata(): UserMetadata {\n    return this._user.metadata;\n  }\n\n  get phoneNumber(): string | null {\n    return this._user.phoneNumber || null;\n  }\n\n  get photoURL(): string | null {\n    return this._user.photoURL || null;\n  }\n\n  get providerData(): Array<UserInfo> {\n    return this._user.providerData;\n  }\n\n  get providerId(): string {\n    return this._user.providerId;\n  }\n\n  get uid(): string {\n    return this._user.uid;\n  }\n\n  /**\n   * METHODS\n   */\n\n  /**\n   * Delete the current user\n   * @return {Promise}\n   */\n  async delete(): Promise<User> {\n    await this._auth.nativeModule.delete();\n    return this._auth._setUser();\n  }\n\n  /**\n   * Returns a JWT token used to identify the user to a Firebase service.\n   *\n   * @param forceRefresh boolean Force refresh regardless of token expiration.\n   * @return {Promise<string>}\n   */\n  async getIdToken(forceRefresh: boolean = false): Promise<string> {\n    return await this._auth.nativeModule.getIdToken(forceRefresh);\n  }\n\n  /**\n   * Returns a IdTokenResult object which contains the ID token JWT string and other properties for getting\n   * data associated with the token and all the decoded payload claims.\n   *\n   * @param forceRefresh boolean Force refresh regardless of token expiration.\n   * @return {Promise<IdTokenResult>}\n   */\n  async getIdTokenResult(forceRefresh: boolean = false): Promise<IdTokenResult> {\n    return await this._auth.nativeModule.getIdTokenResult(forceRefresh);\n  }\n\n  /**\n   * @param credential\n   */\n  async linkWithCredential(credential: AuthCredential): Promise<UserCredential> {\n    const userCredential = await this._auth.nativeModule.linkWithCredential(\n      credential.providerId,\n      credential.token,\n      credential.secret\n    );\n    return await this._auth._setUserCredential(userCredential);\n  }\n\n  /**\n   * @deprecated Deprecated linkAndRetrieveDataWithCredential in favor of linkWithCredential.\n   * @param credential\n   */\n  async linkAndRetrieveDataWithCredential(credential: AuthCredential): Promise<UserCredential> {\n    console.warn('Deprecated linkAndRetrieveDataWithCredential in favor of linkWithCredential.');\n    return await this.linkAndRetrieveDataWithCredential(credential);\n  }\n\n  /**\n   * Re-authenticate a user with a third-party authentication provider\n   * @return {Promise}         A promise resolved upon completion\n   */\n  async reauthenticateWithCredential(credential: AuthCredential): Promise<UserCredential> {\n    const userCredential = await this._auth.nativeModule.reauthenticateWithCredential(\n      credential.providerId,\n      credential.token,\n      credential.secret\n    );\n    return await this._auth._setUserCredential(userCredential);\n  }\n\n  /**\n   * Re-authenticate a user with a third-party authentication provider\n   *\n   * @deprecated Deprecated reauthenticateAndRetrieveDataWithCredential in favor of reauthenticateWithCredential.\n   * @return {Promise}         A promise resolved upon completion\n   */\n  async reauthenticateAndRetrieveDataWithCredential(\n    credential: AuthCredential\n  ): Promise<UserCredential> {\n    console.warn(\n      'Deprecated reauthenticateAndRetrieveDataWithCredential in favor of reauthenticateWithCredential.'\n    );\n    return await this.reauthenticateWithCredential(credential);\n  }\n\n  /**\n   * Reload the current user\n   * @return {Promise}\n   */\n  async reload(): Promise<User> {\n    const user = await this._auth.nativeModule.reload();\n    return await this._auth._setUser(user);\n  }\n\n  /**\n   * Send verification email to current user.\n   */\n  async sendEmailVerification(actionCodeSettings?: ActionCodeSettings): Promise<User> {\n    const user = await this._auth.nativeModule.sendEmailVerification(actionCodeSettings);\n    return await this._auth._setUser(user);\n  }\n\n  toJSON(): { [key: string]: any } {\n    return Object.assign({}, this._user);\n  }\n\n  /**\n   *\n   * @param providerId\n   * @return {Promise.<TResult>|*}\n   */\n  async unlink(providerId: string): Promise<User> {\n    const user = await this._auth.nativeModule.unlink(providerId);\n    return await this._auth._setUser(user);\n  }\n\n  /**\n   * Update the current user's email\n   *\n   * @param  {string} email The user's _new_ email\n   * @return {Promise}       A promise resolved upon completion\n   */\n  async updateEmail(email: string): Promise<void> {\n    const user = await this._auth.nativeModule.updateEmail(email);\n    return await this._auth._setUser(user);\n  }\n\n  /**\n   * Update the current user's password\n   * @param  {string} password the new password\n   * @return {Promise}\n   */\n  async updatePassword(password: string): Promise<User> {\n    const user = await this._auth.nativeModule.updatePassword(password);\n    return await this._auth._setUser(user);\n  }\n\n  /**\n   * Update the current user's phone number\n   *\n   * @param  {AuthCredential} credential Auth credential with the _new_ phone number\n   * @return {Promise}\n   */\n  async updatePhoneNumber(credential: AuthCredential): Promise<User> {\n    const user = await this._auth.nativeModule.updatePhoneNumber(\n      credential.providerId,\n      credential.token,\n      credential.secret\n    );\n    return await this._auth._setUser(user);\n  }\n\n  /**\n   * Update the current user's profile\n   * @param  {Object} updates An object containing the keys listed [here](https://firebase.google.com/docs/auth/ios/manage-users#update_a_users_profile)\n   * @return {Promise}\n   */\n  async updateProfile(updates: UpdateProfile = {}): Promise<User> {\n    const user = await this._auth.nativeModule.updateProfile(updates);\n    return this._auth._setUser(user);\n  }\n\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n  linkWithPhoneNumber() {\n    throw new Error(\n      INTERNALS.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithPhoneNumber')\n    );\n  }\n\n  linkWithPopup() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithPopup'));\n  }\n\n  linkWithRedirect() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'linkWithRedirect'));\n  }\n\n  reauthenticateWithPhoneNumber() {\n    throw new Error(\n      INTERNALS.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithPhoneNumber')\n    );\n  }\n\n  reauthenticateWithPopup() {\n    throw new Error(\n      INTERNALS.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithPopup')\n    );\n  }\n\n  reauthenticateWithRedirect() {\n    throw new Error(\n      INTERNALS.STRINGS.ERROR_UNSUPPORTED_CLASS_METHOD('User', 'reauthenticateWithRedirect')\n    );\n  }\n\n  get refreshToken(): string {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_CLASS_PROPERTY('User', 'refreshToken'));\n  }\n}\n"]}