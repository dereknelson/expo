{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { App, ModuleBase } from 'expo-firebase-app';\n\ninterface NativeValue {\n  stringValue?: string;\n  numberValue?: number;\n  dataValue?: Object;\n  boolValue?: boolean;\n  source: 'remoteConfigSourceRemote' | 'remoteConfigSourceDefault' | ' remoteConfigSourceStatic';\n}\n\nexport const MODULE_NAME = 'ExpoFirebaseRemoteConfig';\nexport const NAMESPACE = 'config';\nexport const statics = {};\n\ninterface ConfigSnapshot {\n  source: string;\n  val(): any;\n}\n\nexport default class RemoteConfig extends ModuleBase {\n  static moduleName = MODULE_NAME;\n  static namespace = NAMESPACE;\n  static statics = statics;\n  _developerModeEnabled: boolean;\n\n  constructor(app: App) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE,\n    });\n    this._developerModeEnabled = false;\n  }\n\n  /**\n   * Converts a native map to single JS value\n   * @param nativeValue\n   * @returns {*}\n   * @private\n   */\n  _nativeValueToJS(nativeValue: NativeValue): ConfigSnapshot {\n    return {\n      source: nativeValue.source,\n      val() {\n        if (\n          nativeValue.boolValue !== null &&\n          (nativeValue.stringValue === 'true' ||\n            nativeValue.stringValue === 'false' ||\n            nativeValue.stringValue === null)\n        )\n          return nativeValue.boolValue;\n        if (\n          nativeValue.numberValue !== null &&\n          nativeValue.numberValue !== undefined &&\n          (nativeValue.stringValue == null ||\n            nativeValue.stringValue === '' ||\n            nativeValue.numberValue.toString() === nativeValue.stringValue)\n        )\n          return nativeValue.numberValue;\n        if (\n          nativeValue.dataValue !== nativeValue.stringValue &&\n          (nativeValue.stringValue == null || nativeValue.stringValue === '')\n        )\n          return nativeValue.dataValue;\n        return nativeValue.stringValue;\n      },\n    };\n  }\n\n  /**\n   * Enable Remote Config developer mode to allow for frequent refreshes of the cache\n   */\n  enableDeveloperMode() {\n    if (!this._developerModeEnabled) {\n      this.logger.debug('Enabled developer mode');\n      this.nativeModule.enableDeveloperMode();\n      this._developerModeEnabled = true;\n    }\n  }\n\n  /**\n   * Fetches Remote Config data\n   * Call activateFetched to make fetched data available in app\n   * @returns {*|Promise.<String>}:\n   */\n  async fetch(expiration?: number): Promise<string> {\n    if (expiration !== undefined) {\n      this.logger.debug(`Fetching remote config data with expiration ${expiration.toString()}`);\n      return await this.nativeModule.fetchWithExpirationDuration(expiration);\n    }\n    this.logger.debug('Fetching remote config data');\n    return await this.nativeModule.fetch();\n  }\n\n  /**\n   * Applies Fetched Config data to the Active Config\n   * @returns {*|Promise.<Bool>}\n   * resolves if there was a Fetched Config, and it was activated,\n   * rejects if no Fetched Config was found, or the Fetched Config was already activated.\n   */\n  async activateFetched(): Promise<boolean> {\n    this.logger.debug('Activating remote config');\n    return await this.nativeModule.activateFetched();\n  }\n\n  /**\n   * Gets the config value of the default namespace.\n   * @param key: Config key\n   * @returns {*|Promise.<Object>}, will always resolve\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n  async getValue(key: string): Promise<ConfigSnapshot> {\n    return await this.nativeModule.getValue(key || '').then(this._nativeValueToJS);\n  }\n\n  /**\n   * Gets the config value of the default namespace.\n   * @param keys: Config key\n   * @returns {*|Promise.<Object>}, will always resolve.\n   * Result will be a dictionary of key and config objects\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n  getValues(keys: string[]): Promise<{ [key: string]: ConfigSnapshot }> {\n    return this.nativeModule.getValues(keys || []).then(nativeValues => {\n      const values: { [key: string]: Object } = {};\n      for (let i = 0, len = keys.length; i < len; i++) {\n        values[keys[i]] = this._nativeValueToJS(nativeValues[i]);\n      }\n      return values;\n    });\n  }\n\n  /**\n   * Get the set of parameter keys that start with the given prefix, from the default namespace\n   * @param prefix: The key prefix to look for. If prefix is nil or empty, returns all the keys.\n   * @returns {*|Promise.<Array<String>>}\n   */\n  async getKeysByPrefix(prefix?: string): Promise<string[]> {\n    return await this.nativeModule.getKeysByPrefix(prefix);\n  }\n\n  /**\n   * Sets config defaults for parameter keys and values in the default namespace config.\n   * @param defaults: A dictionary mapping a String key to a Object values.\n   */\n  setDefaults(defaults: Object): void {\n    this.nativeModule.setDefaults(defaults);\n  }\n\n  /**\n   * Sets default configs from plist for default namespace;\n   * @param resource: The plist file name or resource ID\n   */\n  setDefaultsFromResource(resource: string | number): void {\n    this.nativeModule.setDefaultsFromResource(resource);\n  }\n}\n\nexport { NativeValue, ConfigSnapshot };\n"]}