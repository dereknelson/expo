{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,EAAE,EAAO,UAAU,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACrE,OAAO,UAAU,MAAM,cAAc,CAAC;AAGtC,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;AAC3B,MAAM,CAAC,MAAM,SAAS,GAAG,WAAW,CAAC;AACrC,MAAM,CAAC,MAAM,WAAW,GAAG,uBAAuB,CAAC;AACnD,MAAM,CAAC,MAAM,OAAO,GAAuC;IACzD,cAAc,EAAE;QACd,EAAE,EAAE,IAAI;QACR,SAAS,EAAE,WAAW;QACtB,OAAO,EAAE,SAAS;QAClB,gBAAgB,EAAE,kBAAkB;QACpC,iBAAiB,EAAE,mBAAmB;QACtC,SAAS,EAAE,WAAW;QACtB,cAAc,EAAE,gBAAgB;QAChC,iBAAiB,EAAE,mBAAmB;QACtC,eAAe,EAAE,iBAAiB;QAClC,kBAAkB,EAAE,oBAAoB;QACxC,mBAAmB,EAAE,qBAAqB;QAC1C,OAAO,EAAE,SAAS;QAClB,YAAY,EAAE,cAAc;QAC5B,aAAa,EAAE,eAAe;QAC9B,QAAQ,EAAE,UAAU;QACpB,WAAW,EAAE,aAAa;QAC1B,SAAS,EAAE,WAAW;KACvB;CACF,CAAC;AAEF;;;;GAIG;AACH,KAAK,UAAU,aAAa,CAAC,aAAa;IACxC,IAAI,QAAQ,CAAC,aAAa,CAAC,IAAI,aAAa,CAAC,OAAO,EAAE;QACpD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC;QACjD,MAAM,IAAI,UAAU,CAClB,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,cAAc,CAAC,OAAO,EAC9D,OAAO,EACP,OAAO,CACR,CAAC;KACH;IAED,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,MAAM,CAAC,OAAO,OAAO,SAAU,SAAQ,UAAU;IAI/C,YAAY,WAAgB,EAAE,MAAe;QAC3C,IAAI,IAAI,GAAG,WAAW,CAAC;QACvB,IAAI,OAAO,GAAG,MAAM,IAAI,aAAa,CAAC;QAEtC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;SACvB;QAED,KAAK,CACH,IAAI,EACJ;YACE,kBAAkB,EAAE,IAAI;YACxB,mBAAmB,EAAE,KAAK;YAC1B,iBAAiB,EAAE,IAAI;YACvB,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,WAAW;SACxB,EACD,OAAO,CACR,CAAC;IACJ,CAAC;IAED;;;;OAIG;IAEH;;;OAGG;IACH,aAAa,CAAC,IAAY;QACxB,OAAO,CAAC,IAAU,EAAwB,EAAE;YAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAChE,OAAO,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrC,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,oBAAoB,CAAC,MAAc;QACvC,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC;;AArDM,oBAAU,GAAG,WAAW,CAAC;AACzB,mBAAS,GAAG,SAAS,CAAC;AACtB,iBAAO,GAAG,OAAO,CAAC","sourcesContent":["import firebase, { App, ModuleBase, utils } from 'expo-firebase-app';\nimport HttpsError from './HttpsError';\nimport { HttpsCallable, HttpsErrorCode, HttpsCallablePromise } from './types.flow';\n\nconst { isObject } = utils;\nexport const NAMESPACE = 'functions';\nexport const MODULE_NAME = 'ExpoFirebaseFunctions';\nexport const statics: { HttpsErrorCode: HttpsErrorCode } = {\n  HttpsErrorCode: {\n    OK: 'ok',\n    CANCELLED: 'cancelled',\n    UNKNOWN: 'unknown',\n    INVALID_ARGUMENT: 'invalid-argument',\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\n    NOT_FOUND: 'not-found',\n    ALREADY_EXISTS: 'already-exists',\n    PERMISSION_DENIED: 'permission-denied',\n    UNAUTHENTICATED: 'unauthenticated',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    FAILED_PRECONDITION: 'failed-precondition',\n    ABORTED: 'aborted',\n    OUT_OF_RANGE: 'out-of-range',\n    UNIMPLEMENTED: 'unimplemented',\n    INTERNAL: 'internal',\n    UNAVAILABLE: 'unavailable',\n    DATA_LOSS: 'data-loss',\n  },\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\nasync function errorOrResult(possibleError): Promise<HttpsCallablePromise> {\n  if (isObject(possibleError) && possibleError.__error) {\n    const { code, message, details } = possibleError;\n    throw new HttpsError(\n      statics.HttpsErrorCode[code] || statics.HttpsErrorCode.UNKNOWN,\n      message,\n      details\n    );\n  }\n\n  return possibleError;\n}\n\nexport default class Functions extends ModuleBase {\n  static moduleName = MODULE_NAME;\n  static namespace = NAMESPACE;\n  static statics = statics;\n  constructor(appOrRegion: App, region?: string) {\n    let _app = appOrRegion;\n    let _region = region || 'us-central1';\n\n    if (typeof _app === 'string') {\n      _region = _app;\n      _app = firebase.app();\n    }\n\n    super(\n      _app,\n      {\n        hasMultiAppSupport: true,\n        hasCustomUrlSupport: false,\n        hasRegionsSupport: true,\n        namespace: NAMESPACE,\n        moduleName: MODULE_NAME,\n      },\n      _region\n    );\n  }\n\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string): HttpsCallable {\n    return (data?: any): HttpsCallablePromise => {\n      const promise = this.nativeModule.httpsCallable(name, { data });\n      return promise.then(errorOrResult);\n    };\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally.\n   *\n   * See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @param origin the origin string of the local emulator started via firebase tools\n   * \"http://10.0.0.8:1337\".\n   */\n  async useFunctionsEmulator(origin: string): Promise<null> {\n    return await this.nativeModule.useFunctionsEmulator(origin);\n  }\n}\n"]}