{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../src/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import { SharedEventEmitter } from 'expo-firebase-app';\n\n// import type Database from './index';\ntype Database = { [key: string]: any };\n\nlet transactionId = 0;\n\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\nconst generateTransactionId = (): number => transactionId++;\n\n/**\n * @class TransactionHandler\n */\nexport default class TransactionHandler {\n  _database: Database;\n  _transactions: { [id: number]: any };\n\n  constructor(database: Database) {\n    this._transactions = {};\n    this._database = database;\n\n    SharedEventEmitter.addListener(\n      this._database.getAppEventName('Expo.Firebase.database_transaction_event'),\n      this._handleTransactionEvent.bind(this)\n    );\n  }\n\n  /**\n   * Add a new transaction and start it natively.\n   * @param reference\n   * @param transactionUpdater\n   * @param onComplete\n   * @param applyLocally\n   */\n  add(\n    reference: any,\n    transactionUpdater: Function,\n    onComplete?: Function,\n    applyLocally: boolean = false\n  ) {\n    const id = generateTransactionId();\n\n    this._transactions[id] = {\n      id,\n      reference,\n      transactionUpdater,\n      onComplete,\n      applyLocally,\n      completed: false,\n      started: true,\n    };\n\n    this._database.nativeModule.transactionStart(reference.path, id, applyLocally);\n  }\n\n  /**\n   *  INTERNALS\n   */\n\n  /**\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n  _handleTransactionEvent(event: { [key: string]: any } = {}) {\n    switch (event.type) {\n      case 'update':\n        return this._handleUpdate(event);\n      case 'error':\n        return this._handleError(event);\n      case 'complete':\n        return this._handleComplete(event);\n      default:\n        this._database.logger.warn(`Unknown transaction event type: '${event.type}'`, event);\n        return undefined;\n    }\n  }\n\n  /**\n   *\n   * @param event\n   * @private\n   */\n  _handleUpdate(event: { [key: string]: any } = {}) {\n    let newValue;\n    const { id, value } = event;\n\n    try {\n      const transaction = this._transactions[id];\n      if (!transaction) return;\n\n      newValue = transaction.transactionUpdater(value);\n    } finally {\n      let abort = false;\n\n      if (newValue === undefined) {\n        abort = true;\n      }\n\n      this._database.nativeModule.transactionTryCommit(id, {\n        value: newValue,\n        abort,\n      });\n    }\n  }\n\n  /**\n   *\n   * @param event\n   * @private\n   */\n  _handleError(event: { [key: string]: any } = {}) {\n    const transaction = this._transactions[event.id];\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n      try {\n        transaction.onComplete(event.error, false, null);\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n\n  /**\n   *\n   * @param event\n   * @private\n   */\n  _handleComplete(event: { [key: string]: any } = {}) {\n    const transaction = this._transactions[event.id];\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n      try {\n        transaction.onComplete(null, event.committed, Object.assign({}, event.snapshot));\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n}\n"]}