{"version":3,"file":"Query.js","sourceRoot":"","sources":["../src/Query.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAK1C,MAAM,EAAE,gBAAgB,EAAE,GAAG,KAAK,CAAC;AAEnC,mBAAmB;AAEnB;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,KAAK;IAIxB,YAAY,GAAc,EAAE,iBAA2C;QACrE,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACjE,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;IACxB,CAAC;IAED;;;;;OAKG;IACH,OAAO,CAAC,IAAY,EAAE,GAAY;QAChC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB,EAAE,EAAE,WAAW,IAAI,IAAI,GAAG,IAAI,EAAE,EAAE;YAClC,IAAI,EAAE,SAAS;YACf,IAAI;YACJ,GAAG;SACJ,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,IAAY,EAAE,KAAa;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB,EAAE,EAAE,SAAS,IAAI,IAAI,KAAK,EAAE;YAC5B,IAAI,EAAE,OAAO;YACb,IAAI;YACJ,KAAK;SACN,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,IAAY,EAAE,KAAU,EAAE,GAAY;QAC3C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB,EAAE,EAAE,UAAU,IAAI,IAAI,gBAAgB,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,EAAE,EAAE;YAC5D,IAAI,EAAE,QAAQ;YACd,IAAI;YACJ,KAAK;YACL,SAAS,EAAE,OAAO,KAAK;YACvB,GAAG;SACJ,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,qCAAqC;QACrC,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACxD,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;gBAAE,OAAO,CAAC,CAAC;YAC1B,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,kCAAkC;QAClC,IAAI,GAAG,GAAG,GAAG,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,CAAC,KAAK,CAAC;gBAAE,GAAG,IAAI,GAAG,CAAC;YACxB,GAAG,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC9B;QACD,GAAG,IAAI,GAAG,CAAC;QAEX,OAAO,GAAG,CAAC;IACb,CAAC;CACF","sourcesContent":["import { utils } from 'expo-firebase-app';\n\nimport { DatabaseModifier } from './types';\n// import type Reference from './Reference';\ntype Reference = { [key: string]: any };\nconst { objectToUniqueId } = utils;\n\n// todo doc methods\n\n/**\n * @class Query\n */\nexport default class Query {\n  _reference: Reference;\n  modifiers: Array<DatabaseModifier>;\n\n  constructor(ref: Reference, existingModifiers?: Array<DatabaseModifier>) {\n    this.modifiers = existingModifiers ? [...existingModifiers] : [];\n    this._reference = ref;\n  }\n\n  /**\n   *\n   * @param name\n   * @param key\n   * @return {Reference|*}\n   */\n  orderBy(name: string, key?: string) {\n    this.modifiers.push({\n      id: `orderBy-${name}:${key || ''}`,\n      type: 'orderBy',\n      name,\n      key,\n    });\n\n    return this._reference;\n  }\n\n  /**\n   *\n   * @param name\n   * @param limit\n   * @return {Reference|*}\n   */\n  limit(name: string, limit: number) {\n    this.modifiers.push({\n      id: `limit-${name}:${limit}`,\n      type: 'limit',\n      name,\n      limit,\n    });\n\n    return this._reference;\n  }\n\n  /**\n   *\n   * @param name\n   * @param value\n   * @param key\n   * @return {Reference|*}\n   */\n  filter(name: string, value: any, key?: string) {\n    this.modifiers.push({\n      id: `filter-${name}:${objectToUniqueId(value)}:${key || ''}`,\n      type: 'filter',\n      name,\n      value,\n      valueType: typeof value,\n      key,\n    });\n\n    return this._reference;\n  }\n\n  /**\n   *\n   * @return {[*]}\n   */\n  getModifiers(): DatabaseModifier[] {\n    return [...this.modifiers];\n  }\n\n  /**\n   *\n   * @return {*}\n   */\n  queryIdentifier(): string {\n    // sort modifiers to enforce ordering\n    const sortedModifiers = this.getModifiers().sort((a, b) => {\n      if (a.id < b.id) return -1;\n      if (a.id > b.id) return 1;\n      return 0;\n    });\n\n    // Convert modifiers to unique key\n    let key = '{';\n    for (let i = 0; i < sortedModifiers.length; i++) {\n      if (i !== 0) key += ',';\n      key += sortedModifiers[i].id;\n    }\n    key += '}';\n\n    return key;\n  }\n}\n"]}